# -*- coding: utf-8 -*-
"""Lab 6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HUhYzFOGb3vpiikDvFLym8unO8tuq-qC

Lab 6
"""

class Node:

	def __init__(self, item):
		self.item = item
		self.left = None
		self.right = None


# A utility function to do inorder traversal of BST
def putinorder(root):
	if root is not None:
		putinorder(root.left)
		print (root.item,end=" ")
		putinorder(root.right)


# A utility function to insert a  new node with given key in BST
def insert(node, item):


	#  recuruse down the tree
	if item < node.item:
		node.left = insert(node.left, item)
	else:
		node.right = insert(node.right, item)


	return node




def deleteNode(root, item):

	# Base Case
	if root is None:
		return root


	if item < root.item:
		root.left = deleteNode(root.left, item)





		# Node with only one child or no child
		if root.left is None:
			temp = root.right
			root = None
			return temp

		elif root.right is None:
			temp = root.left
			root = None
			return temp

		# smallest in the right subtree
		temp = minValueNode(root.right)

		root.item = temp.item

		# Delete the inorder successor
		root.right = deleteNode(root.right, temp.item)

	return root




print ("Inorder traversal of the given tree")
inorder(root)



" I used help from geeks to geeks for this assignment as i was having trouble figuring out how to approach this problem"
"https://www.geeksforgeeks.org/find-the-largest-subtree-in-a-tree-that-is-also-a-bst/"

